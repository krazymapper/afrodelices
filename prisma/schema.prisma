generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)

  accounts Account[]
  sessions Session[]
  recipes  Recipe[]
  reviews  Review[]
  ratings  Rating[]
  favorites Recipe[] @relation("UserFavorites")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id          String   @id @default(cuid())
  name        String
  description String
  mealType    String[]
  countryOfOrigin String
  geographicalArea String
  therapeuticProperties Json?
  ingredients Json
  cookingSteps Json
  prepTime    Int
  cookTime    Int
  servings    Int
  imageUrl    String?
  tags        String[]
  difficulty  String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  reviews     Review[]
  ratings     Rating[]
  favoritedBy User[]   @relation("UserFavorites")

  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@index([userId])
  @@index([recipeId])
}

model Rating {
  id        String   @id @default(cuid())
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

enum Role {
  USER
  ADMIN
  CONTRIBUTOR
} 